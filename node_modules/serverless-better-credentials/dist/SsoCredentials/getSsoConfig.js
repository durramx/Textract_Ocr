"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = __importDefault(require("aws-sdk/lib/util"));
function isSsoProfileConfig(c) {
    if (c === undefined || c === null)
        return false;
    if (typeof c !== 'object')
        return false;
    if (!('sso_account_id' in c
        && 'sso_region' in c
        && 'sso_role_name' in c
        && 'sso_start_url' in c))
        return false;
    if (typeof c.sso_account_id !== 'string')
        return false;
    if (typeof c.sso_region !== 'string')
        return false;
    if (typeof c.sso_role_name !== 'string')
        return false;
    if (typeof c.sso_start_url !== 'string')
        return false;
    return true;
}
function getSsoConfig(options) {
    if (!options.profile)
        throw new Error('Cannot load SSO credentials without a profile');
    const profiles = util_1.default.getProfilesFromSharedConfig(util_1.default.iniLoader, options.filename);
    const config = profiles[options.profile];
    if (!isSsoProfileConfig(config)) {
        throw new Error(`Profile ${options.profile} does not have valid SSO credentials. Required `
            + 'parameters "sso_account_id", "sso_region", "sso_role_name", '
            + '"sso_start_url". Reference: '
            + 'https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html');
    }
    return config;
}
exports.default = getSsoConfig;
//# sourceMappingURL=getSsoConfig.js.map