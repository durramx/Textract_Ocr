import Serverless from 'serverless';
import Aws from 'serverless/plugins/aws/provider/awsProvider';
export declare type ServerlessAwsCredentials = {
    credentials: AWS.Credentials;
    region: string;
    signatureVersion?: 'v4';
};
export declare type AwsProvider = Omit<Aws, 'getCredentials'> & {
    getCredentials: () => ServerlessAwsCredentials;
    cachedCredentials: ServerlessAwsCredentials | undefined;
    options: Serverless.Options & {
        'aws-profile'?: string;
    };
    serverless: Serverless & {
        service: {
            provider: Aws.Provider & {
                credentials?: CredentialsOptions;
                deploymentBucketObject?: {
                    serverSideEncryption?: string;
                };
            };
        };
    };
};
export declare type CredentialsOptions = {
    accessKeyId: string;
    secretAccessKey: string;
    sessionToken?: string;
};
export declare type SSOToken = {
    startUrl: string;
    region: string;
    accessToken: string;
    expiresAt: string;
};
export declare type ClientInfo = {
    clientId: string;
    clientSecret: string;
    clientSecretExpiresAt: number;
};
export declare type SsoProfileConfig = {
    sso_account_id: string;
    sso_region: string;
    sso_role_name: string;
    sso_start_url: string;
};
//# sourceMappingURL=types.d.ts.map